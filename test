CURRENT_PATH := $(shell pwd)
GIT_REPO :=$(abspath $(dir $(lastword $(MAKEFILE_LIST)))/..)/
SETTINGS := $(abspath $(dir $(lastword $(MAKEFILE_LIST)))/..)/.settings/
GIT_HOOKS := $(CURRENT_PATH)/.git/hooks
SETTINGS_HOOKS := $(SETTINGS)/hooks

# Colors for output
include $(SETTINGS)/colors.mk

# Function to set hooks
define set_hook
	@file="$1"; \
	hooks=$(GIT_HOOKS); \
	toSet=$$(echo $$hooks/$$file | awk -F'/' '{print $$(NF-3)"/"$$(NF-2)"/"$$(NF-1)"/"$$NF}'); \
	if [ "$(CURRENT_PATH)" = "$(SETTINGS)" ]; then \
		hooks=$(SETTINGS-HOOKS); \
		toSet=$$(echo $$hooks/$$file | awk -F'/' '{print $$(NF-4)"/"$$(NF-3)"/"$$(NF-2)"/"$$(NF-1)"/"$$NF}'); \
	fi; \
	echo Setting:$(PURPLE) $$toSet $(E_NC); \
	cp $(HOOKS)$$file $$hooks; \
	chmod +x $$hooks/$$file; \
	if [ $$? -ne 0 ]; then \
		echo $(RED)"Error: $$file hook not installed"$(E_NC); \
		exit 1; \
	fi; \
	echo $(GREEN)"$$file hook installed."$(E_NC)
endef

original-pre-commit:
	@file="prepare-commit-msg"; \
	hooks=$(GIT-HOOKS); \
	echo $$hooks; \
	toSet=$$(echo $$hooks/$$file | awk -F'/' '{print $$(NF-3)"/"$$(NF-2)"/"$$(NF-1)"/"$$NF}'); \
	if [ "$(CURRENT_PATH)" = "$(SETTINGS)" ]; then \
		hooks=$(SETTINGS-HOOKS); \
		toSet=$$(echo $$hooks/$$file | awk -F'/' '{print $$(NF-4)"/"$$(NF-3)"/"$$(NF-2)"/"$$(NF-1)"/"$$NF}'); \
	fi; \
	echo Setting:$(PURPLE) $$toSet $(E_NC); \
	cp $(HOOKS)$$file $$hooks; \
	chmod +x $$hooks/$$file; \
	if [ $$? -ne 0 ]; then \
		echo $(RED)"Error: $$file hook not installed"$(E_NC); \
		exit 1; \
	fi; \
	echo $(GREEN)"$$file hook installed."$(E_NC)
# Git configuration
.gitconfig:
	@git config --local --list

show-commit-msg:
	@cat $(shell git config --get commit.template)

commit-template:
	@git config --local commit.template $(HOOKS).gitmessage
	@echo "commit-msg hook installed."

# Hook installation
pre-commit:
	$(call set_hook,prepare-commit-msg)

commit-msg:
	$(call set_hook,commit-msg)

post-merge:
	$(call set_hook,post-merge)

show-pwd:
	@echo PWD:$(YELLOW) $(CURRENT_PATH) $(E_NC)

set-hooks: show-pwd pre-commit commit-msg post-merge

# Submodule management
fetch-settings:
	@git submodule update --remote
	@echo "Submodule updated to the latest commit."

update-settings: show-pwd
	@if [ "$(CURRENT_PATH)" != "$(SETTINGS)" ]; then \
		cd $(SETTINGS); \
	fi && \
	$(MAKE) -C . git

# VS Code configuration
.vscode:
	@cp -r $(SETTINGS).vscode .

# Git commands
gAdd:
	@echo $(CYAN) && git add .

gCommit:
	@echo $(GREEN) && git commit -e ; \
	ret=$$? ; \
	if [ $$ret -ne 0 ]; then \
		echo $(RED) "Error in commit message"; \
		exit 1; \
	fi

gPush:
	@echo $(YELLOW) && git push ; \
	ret=$$? ; \
	if [ $$ret -ne 0 ]; then \
		echo $(RED) "git push failed, setting upstream branch\n" $(YELLOW) && \
		git push --set-upstream origin $(shell git branch --show-current) || \
		if [ $$? -ne 0 ]; then \
			echo $(RED) "git push --set-upstream failed with error" $(E_NC); \
		fi \
	fi

# Check if submodule was modified
git-sub:
	@if [ "$(CURRENT_PATH)" != "$(SETTINGS)" ]; then \
		echo "Checking if submodule was modified..."; \
		if [ -n "$$(git diff --submodule)" ]; then \
			$(MAKE) -C . update-settings; \
			SUBMODULE_COMMIT_MESSAGE=$$(git log -1 --pretty=%B); \
			echo "$$SUBMODULE_COMMIT_MESSAGE" && cd .. > /dev/null; \
		fi \
	fi

# Main git target
git: show-pwd
	@$(MAKE) -C . git-sub gAdd gCommit; \
	ret=$$?; \
	if [ $$ret -ne 0 ]; then \
		exit 1; \
	else \
		$(MAKE) -C . gPush; \
	fi

.PHONY: .gitconfig show-commit-msg commit-template pre-commit commit-msg post-merge show-pwd set-hooks fetch-settings update-settings .vscode gAdd gCommit gPush git-sub git